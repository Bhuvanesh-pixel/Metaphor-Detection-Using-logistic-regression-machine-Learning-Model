# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PqZyQsHbyVm1SVybUARGEYtz3E1vcQQ7
"""

import pandas as pd

file_path = 'train.csv'
train_data = pd.read_csv(file_path)

train_data.head()

!pip install transformers[torch]

!pip install accelerate -U

"""

```
# This is formatted as code
```

Logestic Regression"""

import pandas as pd
import re
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import OneHotEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from scipy.sparse import hstack
from sklearn.model_selection import train_test_split

train_file_path = 'train.csv'
df_train = pd.read_csv(train_file_path)

df_train_shuffled = df_train.sample(frac=1, random_state=42)
train_set, test_set = train_test_split(df_train_shuffled, test_size=0.2, random_state=42)
test_set.to_csv('test.csv', index=False)

test_file_path = 'test.csv'
df_test = pd.read_csv(test_file_path)


def normalize_text(text):
    text = text.lower()
    text = re.sub(r'\W+', ' ', text)
    return text

df_train['text'] = df_train['text'].apply(normalize_text)
df_test['text'] = df_test['text'].apply(normalize_text)

vectorizer = TfidfVectorizer(max_features=10000, ngram_range=(1, 2))
X_train_text = vectorizer.fit_transform(df_train['text'])
X_test_text = vectorizer.transform(df_test['text'])

onehot_encoder = OneHotEncoder()
X_train_metaphorID = onehot_encoder.fit_transform(df_train[['metaphorID']])
X_test_metaphorID = onehot_encoder.transform(df_test[['metaphorID']])

X_train = hstack([X_train_text, X_train_metaphorID])
X_test = hstack([X_test_text, X_test_metaphorID])
y_train = df_train['label_boolean']
y_test = df_test['label_boolean']


model = LogisticRegression(C=1.0, class_weight='balanced', max_iter=1000)
model.fit(X_train, y_train)


y_pred = model.predict(X_test)


accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, zero_division=0)
recall = recall_score(y_test, y_pred, zero_division=0)
f1 = f1_score(y_test, y_pred, zero_division=0)

print(f'Accuracy: {accuracy}')
print(f'Precision: {precision}')
print(f'Recall: {recall}')
print(f'F1 Score: {f1}')

pd.DataFrame({"actual": y_test, "predicted": y_pred}).to_csv("logistic_regression_improved_predictions.csv", index=False)